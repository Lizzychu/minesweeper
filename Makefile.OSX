# target
BIN = mine
SOURCES = main.cpp game.cpp ui.cpp
APP = Mine.app

# commandline tools
COMPILER = clang++
LINKER = clang++

# additional path we need
FRAMEWORK_PATH = /Library/Frameworks
SDL_IMAGE_FRAMEWORK = $(FRAMEWORK_PATH)/SDL2_image.framework
SDL_FRAMEWORK = $(FRAMEWORK_PATH)/SDL2.framework

# compiler flags
CFLAGS = -Wextra -g -std=c++11 -stdlib=libc++ -O2 -iframework $(FRAMEWORK_PATH) -c

# link flags
# - statically link standard libraries
LDFLAGS = -F $(FRAMEWORK_PATH) -framework SDL2 -framework SDL2_image

%.o: %.cpp
	$(COMPILER) $(CFLAGS) -o $@ $<

$(BIN): $(SOURCES:.cpp=.o)
	$(LINKER) -o $@ $^ $(LDFLAGS)

.PHONY: dist
dist: $(BIN)
	rm -rf $(APP)
	mkdir $(APP)
	mkdir $(APP)/Contents
	mkdir $(APP)/Contents/MacOS
	mkdir $(APP)/Contents/Resources
	mkdir $(APP)/Contents/Frameworks

	cp $(BIN) $(APP)/Contents/MacOS/$(BIN)
	cp osx-support/Info.plist $(APP)/Contents
	cp -rf images $(APP)/Contents/Resources/images
	cp -rf $(SDL_IMAGE_FRAMEWORK) $(APP)/Contents/Frameworks
	cp -rf $(SDL_FRAMEWORK) $(APP)/Contents/Frameworks

#This is the target that compiles our executable
.PHONY: all
all: dist

.PHONY: clean
clean:
	rm -rf $(BIN) *.o $(APP)

